// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using mvc.Data;

#nullable disable

namespace MovieApp3.Migrations
{
    [DbContext(typeof(UserContext))]
    [Migration("20230513061000_Intial")]
    partial class Intial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("mvc.Models.Categories", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("mvc.Models.Countries", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("countries");
                });

            modelBuilder.Entity("mvc.Models.EpisodeCategory", b =>
                {
                    b.Property<int>("EpisodeId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("EpisodeId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("EpisodeCategories");
                });

            modelBuilder.Entity("mvc.Models.EpisodeCompany", b =>
                {
                    b.Property<int>("EpisodeId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyID")
                        .HasColumnType("int");

                    b.HasKey("EpisodeId", "CompanyID");

                    b.HasIndex("CompanyID");

                    b.ToTable("EpisodeCompanies");
                });

            modelBuilder.Entity("mvc.Models.EpisodeCountry", b =>
                {
                    b.Property<int>("EpisodeId")
                        .HasColumnType("int");

                    b.Property<int>("CountryID")
                        .HasColumnType("int");

                    b.HasKey("EpisodeId", "CountryID");

                    b.HasIndex("CountryID");

                    b.ToTable("EpisodeCountries");
                });

            modelBuilder.Entity("mvc.Models.Episode_crew", b =>
                {
                    b.Property<int>("EpisodeId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("character_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EpisodeId", "PersonId");

                    b.HasIndex("PersonId");

                    b.ToTable("episode_crew");
                });

            modelBuilder.Entity("mvc.Models.Episodes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("TvShowId")
                        .HasColumnType("int");

                    b.Property<string>("audience")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("brief")
                        .IsRequired()
                        .HasMaxLength(700)
                        .HasColumnType("nvarchar(700)");

                    b.Property<string>("duration")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<bool>("isOnWatchlist")
                        .HasColumnType("bit");

                    b.Property<string>("itemType")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<int?>("nominated")
                        .HasMaxLength(25)
                        .HasColumnType("int");

                    b.Property<string>("poster")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<int>("rating")
                        .HasColumnType("int");

                    b.Property<string>("releas_date")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("story_line")
                        .IsRequired()
                        .HasMaxLength(1400)
                        .HasColumnType("nvarchar(1400)");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("won")
                        .HasMaxLength(15)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TvShowId");

                    b.ToTable("episodes");
                });

            modelBuilder.Entity("mvc.Models.Media", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("content_type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("itemType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("media_type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("media");
                });

            modelBuilder.Entity("mvc.Models.MovieCategories", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("MovieId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("MoviesCategories");
                });

            modelBuilder.Entity("mvc.Models.MovieCompany", b =>
                {
                    b.Property<int>("movieId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyID")
                        .HasColumnType("int");

                    b.HasKey("movieId", "CompanyID");

                    b.HasIndex("CompanyID");

                    b.ToTable("MovieCompanies");
                });

            modelBuilder.Entity("mvc.Models.MovieCountry", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.HasKey("MovieId", "CountryId");

                    b.HasIndex("CountryId");

                    b.ToTable("MovieCountries");
                });

            modelBuilder.Entity("mvc.Models.Movie_crew", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("character_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MovieId", "PersonId");

                    b.HasIndex("PersonId");

                    b.ToTable("Movies_crew");
                });

            modelBuilder.Entity("mvc.Models.Movies", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("audience")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("brief")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("duration")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("isOnWatchlist")
                        .HasColumnType("bit");

                    b.Property<string>("itemType")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("nominated")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("poster")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("rating")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("release_date")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("story_line")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("won")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("mvc.Models.People", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("birth_year")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("brief")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("city_born")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("country_born")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("divorce")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("height")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isOnWatchlist")
                        .HasColumnType("bit");

                    b.Property<string>("itemType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("married")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nominated")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("num_childern")
                        .HasColumnType("int");

                    b.Property<string>("profile_picture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("spouse_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("state_born")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("won")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("people");
                });

            modelBuilder.Entity("mvc.Models.PeopleRoles", b =>
                {
                    b.Property<int>("personId")
                        .HasColumnType("int");

                    b.Property<int>("roleId")
                        .HasColumnType("int");

                    b.HasKey("personId", "roleId");

                    b.HasIndex("roleId");

                    b.ToTable("PeopleRoles");
                });

            modelBuilder.Entity("mvc.Models.Production_companies", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("production_companies");
                });

            modelBuilder.Entity("mvc.Models.Reviews", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("itemId")
                        .HasColumnType("int");

                    b.Property<string>("itemType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("rating")
                        .HasColumnType("int");

                    b.Property<string>("rating_text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("spoiler")
                        .HasColumnType("bit");

                    b.HasKey("id");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("mvc.Models.Roles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("mvc.Models.TvShowCategory", b =>
                {
                    b.Property<int>("TvShowId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("TvShowId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("TvShowCategories");
                });

            modelBuilder.Entity("mvc.Models.TvShowCompany", b =>
                {
                    b.Property<int>("TvShowId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyID")
                        .HasColumnType("int");

                    b.HasKey("TvShowId", "CompanyID");

                    b.HasIndex("CompanyID");

                    b.ToTable("TvShowCompanies");
                });

            modelBuilder.Entity("mvc.Models.TvShowCountry", b =>
                {
                    b.Property<int>("TvShowId")
                        .HasColumnType("int");

                    b.Property<int>("CountryID")
                        .HasColumnType("int");

                    b.HasKey("TvShowId", "CountryID");

                    b.HasIndex("CountryID");

                    b.ToTable("TvShowCountry");
                });

            modelBuilder.Entity("mvc.Models.Tv_show_crew", b =>
                {
                    b.Property<int>("TvShowId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("character_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TvShowId", "PersonId");

                    b.HasIndex("PersonId");

                    b.ToTable("tv_show_crew");
                });

            modelBuilder.Entity("mvc.Models.Tv_shows", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("audience")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("brief")
                        .IsRequired()
                        .HasMaxLength(600)
                        .HasColumnType("nvarchar(600)");

                    b.Property<string>("duration")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("end_date")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<bool>("isOnWatchlist")
                        .HasColumnType("bit");

                    b.Property<string>("itemType")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<string>("nominated")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<int>("num_season")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.Property<string>("poster")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<float?>("rating")
                        .HasColumnType("real");

                    b.Property<string>("realeas_date")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("start_date")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("story_line")
                        .IsRequired()
                        .HasMaxLength(1400)
                        .HasColumnType("nvarchar(1400)");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("won")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("tv_shows");
                });

            modelBuilder.Entity("mvc.Models.User", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime?>("birth_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("gender")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("profile_picture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("mvc.Models.Watchlist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Watchlists");
                });

            modelBuilder.Entity("mvc.Models.WatchlistItemCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CategoryType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WatchlistItemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("WatchlistItemId");

                    b.ToTable("WatchlistItemCategories");
                });

            modelBuilder.Entity("mvc.Models.WatchlistItems", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("WatchlistId")
                        .HasColumnType("int");

                    b.Property<string>("itemType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("WatchlistId");

                    b.ToTable("WatchlistItems");
                });

            modelBuilder.Entity("mvc.Models.EpisodeCategory", b =>
                {
                    b.HasOne("mvc.Models.Categories", "Category")
                        .WithMany("EpisodeCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("mvc.Models.Episodes", "Episode")
                        .WithMany("EpisodeCategories")
                        .HasForeignKey("EpisodeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Episode");
                });

            modelBuilder.Entity("mvc.Models.EpisodeCompany", b =>
                {
                    b.HasOne("mvc.Models.Production_companies", "Company")
                        .WithMany("EpisodeCompanies")
                        .HasForeignKey("CompanyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("mvc.Models.Episodes", "Episode")
                        .WithMany("EpisodeCompanies")
                        .HasForeignKey("EpisodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Episode");
                });

            modelBuilder.Entity("mvc.Models.EpisodeCountry", b =>
                {
                    b.HasOne("mvc.Models.Countries", "Country")
                        .WithMany("EpisodeCountries")
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("mvc.Models.Episodes", "Episode")
                        .WithMany("EpisodeCountries")
                        .HasForeignKey("EpisodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Episode");
                });

            modelBuilder.Entity("mvc.Models.Episode_crew", b =>
                {
                    b.HasOne("mvc.Models.Episodes", "Episode")
                        .WithMany("EpisodeCrew")
                        .HasForeignKey("EpisodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("mvc.Models.People", "Person")
                        .WithMany("EpisodeCrew")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Episode");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("mvc.Models.Episodes", b =>
                {
                    b.HasOne("mvc.Models.Tv_shows", "TvShow")
                        .WithMany("Episodes")
                        .HasForeignKey("TvShowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TvShow");
                });

            modelBuilder.Entity("mvc.Models.MovieCategories", b =>
                {
                    b.HasOne("mvc.Models.Categories", "Category")
                        .WithMany("MovieCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("mvc.Models.Movies", "Movie")
                        .WithMany("MovieCategories")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("mvc.Models.MovieCompany", b =>
                {
                    b.HasOne("mvc.Models.Production_companies", "Company")
                        .WithMany("MovieCompanies")
                        .HasForeignKey("CompanyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("mvc.Models.Movies", "Movie")
                        .WithMany("MovieCompanies")
                        .HasForeignKey("movieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("mvc.Models.MovieCountry", b =>
                {
                    b.HasOne("mvc.Models.Countries", "Country")
                        .WithMany("MovieCountries")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("mvc.Models.Movies", "Movie")
                        .WithMany("MovieCountries")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("mvc.Models.Movie_crew", b =>
                {
                    b.HasOne("mvc.Models.Movies", "Movie")
                        .WithMany("MovieCrew")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("mvc.Models.People", "Person")
                        .WithMany("MovieCrew")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("mvc.Models.PeopleRoles", b =>
                {
                    b.HasOne("mvc.Models.People", "person")
                        .WithMany("PeopleRoles")
                        .HasForeignKey("personId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("mvc.Models.Roles", "role")
                        .WithMany("PeopleRoles")
                        .HasForeignKey("roleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("person");

                    b.Navigation("role");
                });

            modelBuilder.Entity("mvc.Models.Reviews", b =>
                {
                    b.HasOne("mvc.Models.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("mvc.Models.TvShowCategory", b =>
                {
                    b.HasOne("mvc.Models.Categories", "Category")
                        .WithMany("TvShowCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("mvc.Models.Tv_shows", "TvShow")
                        .WithMany("TvShowCategories")
                        .HasForeignKey("TvShowId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("TvShow");
                });

            modelBuilder.Entity("mvc.Models.TvShowCompany", b =>
                {
                    b.HasOne("mvc.Models.Production_companies", "Company")
                        .WithMany("TvShowCompanies")
                        .HasForeignKey("CompanyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("mvc.Models.Tv_shows", "TvShow")
                        .WithMany("TvShowCompanies")
                        .HasForeignKey("TvShowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("TvShow");
                });

            modelBuilder.Entity("mvc.Models.TvShowCountry", b =>
                {
                    b.HasOne("mvc.Models.Countries", "Country")
                        .WithMany("TvShowCountries")
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("mvc.Models.Tv_shows", "TvShow")
                        .WithMany("TvShowCountries")
                        .HasForeignKey("TvShowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("TvShow");
                });

            modelBuilder.Entity("mvc.Models.Tv_show_crew", b =>
                {
                    b.HasOne("mvc.Models.People", "Person")
                        .WithMany("TvShowCrew")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("mvc.Models.Tv_shows", "TvShow")
                        .WithMany("TvShowCrew")
                        .HasForeignKey("TvShowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("TvShow");
                });

            modelBuilder.Entity("mvc.Models.Watchlist", b =>
                {
                    b.HasOne("mvc.Models.User", "User")
                        .WithMany("WatchList")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("mvc.Models.WatchlistItemCategory", b =>
                {
                    b.HasOne("mvc.Models.Categories", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("mvc.Models.WatchlistItems", "WatchlistItem")
                        .WithMany("Category")
                        .HasForeignKey("WatchlistItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("WatchlistItem");
                });

            modelBuilder.Entity("mvc.Models.WatchlistItems", b =>
                {
                    b.HasOne("mvc.Models.Watchlist", "Watchlist")
                        .WithMany("WatchlistItems")
                        .HasForeignKey("WatchlistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Watchlist");
                });

            modelBuilder.Entity("mvc.Models.Categories", b =>
                {
                    b.Navigation("EpisodeCategories");

                    b.Navigation("MovieCategories");

                    b.Navigation("TvShowCategories");
                });

            modelBuilder.Entity("mvc.Models.Countries", b =>
                {
                    b.Navigation("EpisodeCountries");

                    b.Navigation("MovieCountries");

                    b.Navigation("TvShowCountries");
                });

            modelBuilder.Entity("mvc.Models.Episodes", b =>
                {
                    b.Navigation("EpisodeCategories");

                    b.Navigation("EpisodeCompanies");

                    b.Navigation("EpisodeCountries");

                    b.Navigation("EpisodeCrew");
                });

            modelBuilder.Entity("mvc.Models.Movies", b =>
                {
                    b.Navigation("MovieCategories");

                    b.Navigation("MovieCompanies");

                    b.Navigation("MovieCountries");

                    b.Navigation("MovieCrew");
                });

            modelBuilder.Entity("mvc.Models.People", b =>
                {
                    b.Navigation("EpisodeCrew");

                    b.Navigation("MovieCrew");

                    b.Navigation("PeopleRoles");

                    b.Navigation("TvShowCrew");
                });

            modelBuilder.Entity("mvc.Models.Production_companies", b =>
                {
                    b.Navigation("EpisodeCompanies");

                    b.Navigation("MovieCompanies");

                    b.Navigation("TvShowCompanies");
                });

            modelBuilder.Entity("mvc.Models.Roles", b =>
                {
                    b.Navigation("PeopleRoles");
                });

            modelBuilder.Entity("mvc.Models.Tv_shows", b =>
                {
                    b.Navigation("Episodes");

                    b.Navigation("TvShowCategories");

                    b.Navigation("TvShowCompanies");

                    b.Navigation("TvShowCountries");

                    b.Navigation("TvShowCrew");
                });

            modelBuilder.Entity("mvc.Models.User", b =>
                {
                    b.Navigation("Reviews");

                    b.Navigation("WatchList");
                });

            modelBuilder.Entity("mvc.Models.Watchlist", b =>
                {
                    b.Navigation("WatchlistItems");
                });

            modelBuilder.Entity("mvc.Models.WatchlistItems", b =>
                {
                    b.Navigation("Category");
                });
#pragma warning restore 612, 618
        }
    }
}
